import Html exposing (text)

-- Question 1 (Single parameter functions: Declaration and definition)
-- a) Write a type-annotation for a function which takes a single parameter of type
--    Int and returns an Int. Name it `multiplyByTwo`
-- b) Define `multiplyByTwo` (implement it)

multiplyByTwo : Int -> Int 
multiplyByTwo = multiply 2

-- Question 2 (Application)
-- a) Use it to define a constant named `four` which is equivalent to applying `multiplyByTwo` to the value 2.
-- b) Write the type annotation for `four`
-- c) Use the |> to apply `multiplyByTwo` to the const named `four` and call it `eight`
-- d) Write the type annotation for `eight`
-- e) Use the <| to apply `multiplyByTwo` to the const named `eight` and call it `sixteen`
-- f) Write the type annotation for `sixteen`
four : Int
four = multiplyByTwo 2

eight : Int
eight = four |> multiplyByTwo

sixteen : Int
sixteen = multiplyByTwo |< eight

main=
 text (
    String.fromInt(four) ++ " " ++ (String.fromInt(eight) ++ " " ++ (String.fromInt(sixteen))))

-- Question 3 (Display of non-strings)
-- a) Use `String.fromInt` to display some of the constant values you made before
-- b) Use `String.fromInt` and |> to `multiplyByTwo` the `sixteen` and display it (it should show 32)
-- c) Use `String.fromInt` and <| to `multiplyByTwo` and one of the other constants. 
main=
 text (
    String.fromInt(four) ++ " = Const value; " ++ (String.fromInt(sixteen |> multiplyByTwo) ++ " =sixteen |> multiplyByTwo " ++ (String.fromInt(multiplyByTwo <| four) ++ "= multiplyByTwo <| four "))
    )

-- Question 5 (Multi parameter functions: Declaration and definition)
-- a) Write the type annotation for a function which takes a two parameters of type Int and returns an Int. Name it `multiply`.
-- b) Define `multiply` (implement it)
-- c) Write the type annotation for a function which takes two parameters of type Int an returns a String Name it `multiplyAndFormat`
-- d) Define `multiplyAndFormat` (implement it)
mutliply : Int -> Int -> Int
multiply z = x * y
multiplyAndFormat : Int -> String
multiplyAndFormat = multiply 555
main = text (String.fromInt(multiplyAndFormat 555))

-- Question 6 (Partial Application)
-- a) Define a new function called `multiplyByTwoAgain`, but this time make it by partially applying `multiply`
-- b) Write the type annotation for `multiplyByTwoAgain`.
-- c) Define a new function called `multiplyByTwoAndFormat`. Make it through partially application of `multiplyAndFormat`
-- d) Write the type annotation for `multiplyByTwoAndFormat`.
multiplyByTwoAgain : Int
multiplyByTwoAgain = multiply 2

multiplyByTwoAndFormat : Int
multiplyByTwoAndFormat = multiplyAndFormat * multiplyByTwoAgain
